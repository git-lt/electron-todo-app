// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // Force to have the .prisma folder with pnpm
  output="../../node_modules/.prisma/client"
}

datasource db {
  // provider = "sqlite"
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Session {
  id String @id @default(cuid())
  sessionToken String @unique
  expires DateTime
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

model User {
  id String @id @default(cuid())
  name String?
  email String? @unique
  emailVerified DateTime? @unique
  image String?
  accounts Account[]
  sessions Session[]
  createAt DateTime
  updateAt DateTime
}

model Account {
 id String @id @default(cuid())
 type String
 provider String
 providerAccountId String
 refresh_token String?
 access_token String?
 token_type String?
 id_token String?
 expires_at Int?
 session_state String?
 scope String?
 user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 userId String

 @@unique([provider, providerAccountId])
}

model VerificationToken {
  identity String
  token String @unique
  expires DateTime

  @@unique([identity, token])
}

model Workspace {
  id Int @id @default(autoincrement())
  name String
  createAt DateTime @map("create_at")
  updateAt DateTime @map("update_at")
}

model Team {
  id Int @id @default(autoincrement())
  name String
  icon String
  identifier String
  createAt DateTime @map("create_at")
  updateAt DateTime @map("update_at")
}

model Role {
  id Int @id @default(autoincrement())
  name String
  createAt DateTime @map("create_at")
  updateAt DateTime @map("update_at")
}

model Task {
  id Int @id @default(autoincrement())
  name String
  description String
  pid Int @default(0)
  createAt DateTime @map("create_at")
  updateAt DateTime @map("update_at")
}

model Product {
  id Int @id @default(autoincrement())
  name String
  description String
  createAt DateTime @map("create_at")
  updateAt DateTime @map("update_at")
}

model Project {
  id Int @id @default(autoincrement())
  name String
  description String
  createAt DateTime @map("create_at")
  updateAt DateTime @map("update_at")
}

model Dictionary {
  id Int @id @default(autoincrement())
  name String
  code String
  sort Int
  type String
  status Int
  createAt DateTime @map("create_at")
  updateAt DateTime @map("update_at")
}
model DictionaryType {
  id Int @id @default(autoincrement())
  name String
  type String
  status Int
  createAt DateTime @map("create_at")
  updateAt DateTime @map("update_at")
}